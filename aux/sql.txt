CREATE TABLE public.card (
	id uuid NOT NULL CONSTRAINT card_pk PRIMARY KEY CONSTRAINT card_pk_gen DEFAULT gen_random_uuid(),
	user_id uuid NOT NULL,
	character_id uuid NOT NULL,
	change_available bool NOT NULL CONSTRAINT card_change_gen DEFAULT false,
	created_at timestamptz NOT NULL CONSTRAINT card_created_gen DEFAULT now(),
	updated_at timestamptz,
	deleted_at timestamptz
);

CREATE TABLE public.change_request (
	requestcard_id uuid NOT NULL,
	offeredcard_id uuid NOT NULL,
	created_at timestamptz NOT NULL CONSTRAINT change_req_created_gen DEFAULT now(),
	cancelled_at timestamptz,
	finished_at timestamptz,
	CONSTRAINT change_request_pk PRIMARY KEY (requestcard_id, offeredcard_id)
);

CREATE TABLE public.users (
	id uuid NOT NULL CONSTRAINT user_pk PRIMARY KEY CONSTRAINT user_pk_gen DEFAULT gen_random_uuid(),
	user_type text NOT NULL,
	email text NOT NULL UNIQUE,
	password text NOT NULL,
	name varchar(40) NOT NULL,
	coins integer NOT NULL,
	created_at timestamptz NOT NULL CONSTRAINT user_created_gen DEFAULT now(),
	updated_at timestamptz,
	deleted_at timestamptz
);

CREATE TABLE public.package (
	id uuid NOT NULL CONSTRAINT package_pk PRIMARY KEY CONSTRAINT package_pk_gen DEFAULT gen_random_uuid(),
	brand uuid NOT NULL,
	type text NOT NULL,
	price integer NOT NULL,
	amount integer NOT NULL,
	copies_sold integer NOT NULL,
	created_at timestamptz NOT NULL,
	updated_at timestamptz,
	finished_at timestamptz,
	chance_common decimal(2,2) NOT NULL,
	chance_rare decimal(2,2) NOT NULL,
	chance_ultrarare decimal(2,2) NOT NULL
);

CREATE TABLE public.character (
	id uuid NOT NULL CONSTRAINT character_pk PRIMARY KEY CONSTRAINT character_pk_gen DEFAULT gen_random_uuid(),
	brand uuid NOT NULL,
	name text NOT NULL,
	rarity text NOT NULL
);

CREATE TABLE public.brand (
	id uuid NOT NULL CONSTRAINT brand_pk PRIMARY KEY CONSTRAINT brand_pk_gen DEFAULT gen_random_uuid(),
	name TEXT NOT NULL,
	series TEXT NOT NULL
);

ALTER TABLE card ADD CONSTRAINT card_fk0 FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE card ADD CONSTRAINT card_fk1 FOREIGN KEY (character_id) REFERENCES character(id);

ALTER TABLE change_request ADD CONSTRAINT change_request_fk0 FOREIGN KEY (requestcard_id) REFERENCES card(id);
ALTER TABLE change_request ADD CONSTRAINT change_request_fk1 FOREIGN KEY (offeredcard_id) REFERENCES card(id);

ALTER TABLE package ADD CONSTRAINT package_fk0 FOREIGN KEY (brand) REFERENCES brand(id);

ALTER TABLE character ADD CONSTRAINT character_fk0 FOREIGN KEY (brand) REFERENCES brand(id);


--MEUS SQLS

SELECT * FROM cadastro WHERE id > 9 and id < 11 ORDER BY RANDOM() LIMIT 1;

--SELECT * FROM cadastro WHERE id > 9 and id < 11 ORDER BY RANDOM() LIMIT 1;

DO $$
BEGIN 
  IF (SELECT id from cadastro where name='Marlisson') > (SELECT id from cadastro where name='josh') AND
  	(5) > (4)
  THEN
    --SELECT id FROM cadastro
  END IF;
END $$;

insert into cadastro (name, email, password) values ('feijão', 'arroz', 'carne') returning id

update cadastro
set name = 'joão'
where id = 23
returning email;

SELECT * FROM cadastro INNER JOIN users ON cadastro.id = users.user_id

--insert into brand (name,series) values ('Disney','A Lagoa Azul');
--select name from brand where series = 'A Lagoa Azul'

--insert into package (brand,type,price,amount,copies_sold,created_at,chance_rare,chance_ultrarare) 
--values ((select id from brand where name = 'Disney'),'Comum',10,10,0,(now()),30,5);

--select package.brand,brand.id from package inner join brand on package.brand = brand.id

--'fd7b556a-0223-4562-b0bd-dc5bf8e10b9e' brand.id

UPDATE package 
SET copies_sold = copies_sold + 1, amount = amount - 1, updated_at = NOW() 
WHERE id = '6208b2b5-aa9a-4ef1-b002-8d5fc0b1b847' AND finished_at IS NULL 
RETURNING brand AS brandID,(SELECT name FROM brand WHERE package.brand = brand.id) AS brandName, price AS cardPrice, chance_rare AS rare,chance_ultrarare AS ultraRare;







CREATE TABLE cadastro (
	id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
	email text NOT NULL UNIQUE,
	name varchar(40) NOT NULL,
	created_at timestamptz NOT NULL CONSTRAINT user_created_gen DEFAULT now(),
	updated_at timestamptz,
	deleted_at timestamptz
);