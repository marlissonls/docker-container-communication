docker start <container ID>
docker stop <container ID>
docker ps           ATIVOS
docker ps -a        TODOS
docker rm -v <container_name>
docker history <image_id>
docker pull <IMAGE NAME>:latest
docker run -dp <port>:<image port> <IMAGE NAME>
docker build -t <NEW IMAGE NAME> .
docker run --rm <container_name>    Remover Container Enquanto Sai de uma Aplicação

docker container rm <container ID>
docker container rm <container ID> <container ID>

docker images -a
docker image rmi <image_id>
docker images rmi <image_id> <image_id>
docker images -f dangling=true      VER IMAGENS PENDETES
docker images purge                 EXCLUIR IMAGENS PENDENTES
docker image pull <image_name>
docker image inspect <image_id>

docker volume ls
docker volume rm <volume_name> <volume_name>
docker volume ls -f dangling=true
docker volume prune
docker volume create my-vol
docker volume inspect my-vol

--mount:
    docker run -d \
    --name devtest \
    --mount source=myvol2,target=/app \
    nginx:latest

-v:
    docker run -d \
    --name devtest \
    -v myvol2:/app \
    nginx:latest

stop container, remove volume.
    docker container stop devtest
    docker container rm devtest
    docker volume rm myvol2


--mount:
    docker run -d \
    -it \
    --name devtest \
    --mount type=bind,source="$(pwd)"/target,target=/app \
    nginx:latest

-v:
    docker run -d \
    -it \
    --name devtest \
    -v "$(pwd)"/target:/app \
    nginx:latest


docker run -it ubuntu bash    /O -it garante que o conteiner segure o comando bash e não saia dele imediatamente.
docker container rm $(docker container ls -aq)      /deleta todos os containers
docker rmi $(docker image ls -aq)
docker rmi $(docker image ls -aq) --force           /--force para forçar

VOLUMES
mkdir volume-docker
docker run -it --name ubuntubind --mount type bind,source=/home/marlisson/volume-docker,target=/app ubuntu bash
cd /app
touch meu-arquivo.txt
cd /home/marlisson/volume-docker
ls
docker run -it --name ubuntubindmount --mount type bind,source=/home/marlisson/volume-docker,target=/app ubuntu bash


docker volume create volume-docker
docker run -it --name ubuntuvolume --mount source=volume-docker,target=/app ubuntu bash

docker run -it --name ubuntutmpfs --mount type=tmpfs,destination=/app ubuntu bash



docker run -it --name alp -v $(pwd)/volume-docker:/usr/share alpine


docker container attach <container>                 executa o bash de um container em execução
docker container exec -it <container> /bin/sh       executa o bash de um container em execução, exec permite executar comandos em containers em execução

MACORATTI APRESENTANDO AS REDES docker
docker container run -d --name mysql -v dadosdb:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=numsey -e bind-address=0.0.0.0 mysql:5.7

MACORATTI CONECTANDO CONTAINERS NA REDE
criar um container com base numa imagem mysql
definir um volume
mapear o volume para a pasta var/lib/mysql do container
criar um banco de dados Alunosdb
Alunos
usar uma imagem base microsoft/dotnet
criar um container e fazer a comunição com o container do mysql usando a rede do docker com uma variavel de ambiente DBHOST usando o ip do container do mysql

1. baixar imagens
2. criar volume do banco 
    docker volume create --name alunosdata
3. criar containers
    docker container run -d --name mysql -v alunosdata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=numsey -e bin d-address=0.0.0.0 mysql:5.7
4. ver a mensagem ready for connections
    docker logs -f mysql
5. criar banco de dados no container
    docker container exec -it mysql /bin/bash
    # mysql -u root -p
    pass: numsey
    show databases;
    create database Alunosdb;
    use Alunosdb
    Create Table Alunos(AlunoID smallint usigned not null auto_increment, Nome varchar 50 not null, Email varchar (80) not null, constraint pk_alunos primary key(AlunoID));
    insert into Alunos(Nome,Email) Values('macoratti', 'macoratti@yahoo.com');
    insert into Alunos(Nome,Email) Values('Pedro', 'pedro@yahoo.com');
    insert into Alunos(Nome,Email) Values('maria', 'maria@yahoo.com');
    select * from Alunos
    exit;
    exit;
6. Verificar ip do container
    docker network inspect bridge
    ver "Containers" (172.17.0.2)
7. docker build -t network-container/app:1.0 .
8. docker container run -d --name mvc1 -p 5000:80 -e DBHOST=173.17.0.2 mvcalunos/app:1.0
21. dotnet new mvc
22.



docker network create my-net
docker network rm my-net     /deleta a rede, mas antes desconectar os conteiners que estão nela
docker create --name my-nginx --network my-net -publish 8080:80 nginx:latest     /cria o container e sinaliza a rede
docker network connect my-nginx my-net       /conecta um container já existente a uma rede já existente
docker network disconnect my-nginx my-net


EXPORTANDO A PORTA DO POSTGRES

docker pull postgres
docker run --name meu-banco -e POSTGRES_PASSWORD=marlisson -d -p 5432:5432 postgres
docker exec -it <container-id> bash
psql -U postgres
CREATE DATABASE meubanco;
\q


CONTAINER POSTGRES

docker pull postgres
docker images
docker run --name meu-banco -e POSTGRES_PASSWORD=postgres -d -p 5432:5432 postgres
docker exec -it <container-id> bash
psql -U postgres
CREATE DATABASE mybanco;
\q